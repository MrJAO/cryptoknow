{"ast":null,"code":"import { supabase } from \"../supabaseClient\"; // Adjust path if needed\n\nexport const subscribeToAirdrops = setAirdrops => {\n  // Fetch initial data (exclude \"id\" explicitly)\n  const fetchAirdrops = async () => {\n    const {\n      data,\n      error\n    } = await supabase.from(\"available_airdrops\").select(\"project_name, task_link, chain, airdrop_type, device_needed, status\"); // ✅ Excludes \"id\"\n\n    if (error) {\n      console.error(\"Error fetching airdrops:\", error);\n    } else {\n      setAirdrops(data);\n    }\n  };\n  fetchAirdrops();\n\n  // Subscribe to real-time updates\n  const channel = supabase.channel(\"available_airdrops\").on(\"postgres_changes\", {\n    event: \"*\",\n    schema: \"public\",\n    table: \"available_airdrops\"\n  }, payload => {\n    console.log(\"Airdrop update received:\", payload);\n    setAirdrops(prev => {\n      if (payload.eventType === \"INSERT\") {\n        return [...prev, payload.new]; // Add new item\n      } else if (payload.eventType === \"UPDATE\") {\n        return prev.map(item => item.project_name === payload.new.project_name ? payload.new : item); // Update item\n      } else if (payload.eventType === \"DELETE\") {\n        return prev.filter(item => item.project_name !== payload.old.project_name);\n      }\n      return prev;\n    });\n  }).subscribe();\n  return () => {\n    supabase.removeChannel(channel); // Cleanup on unmount\n  };\n};","map":{"version":3,"names":["supabase","subscribeToAirdrops","setAirdrops","fetchAirdrops","data","error","from","select","console","channel","on","event","schema","table","payload","log","prev","eventType","new","map","item","project_name","filter","old","subscribe","removeChannel"],"sources":["C:/Users/opril/cryptoknow/src/utils/supabaseSubscription.js"],"sourcesContent":["import { supabase } from \"../supabaseClient\"; // Adjust path if needed\r\n\r\nexport const subscribeToAirdrops = (setAirdrops) => {\r\n  // Fetch initial data (exclude \"id\" explicitly)\r\n  const fetchAirdrops = async () => {\r\n    const { data, error } = await supabase\r\n      .from(\"available_airdrops\")\r\n      .select(\"project_name, task_link, chain, airdrop_type, device_needed, status\"); // ✅ Excludes \"id\"\r\n\r\n    if (error) {\r\n      console.error(\"Error fetching airdrops:\", error);\r\n    } else {\r\n      setAirdrops(data);\r\n    }\r\n  };\r\n\r\n  fetchAirdrops();\r\n\r\n  // Subscribe to real-time updates\r\n  const channel = supabase\r\n  .channel(\"available_airdrops\")\r\n  .on(\r\n    \"postgres_changes\",\r\n    { event: \"*\", schema: \"public\", table: \"available_airdrops\" },\r\n    (payload) => {\r\n      console.log(\"Airdrop update received:\", payload);\r\n      setAirdrops((prev) => {\r\n        if (payload.eventType === \"INSERT\") {\r\n          return [...prev, payload.new]; // Add new item\r\n        } else if (payload.eventType === \"UPDATE\") {\r\n          return prev.map((item) =>\r\n            item.project_name === payload.new.project_name ? payload.new : item\r\n          ); // Update item\r\n        } else if (payload.eventType === \"DELETE\") {\r\n          return prev.filter((item) => item.project_name !== payload.old.project_name);\r\n        }\r\n        return prev;\r\n      });\r\n    }\r\n  )\r\n  .subscribe();\r\n\r\n\r\n  return () => {\r\n    supabase.removeChannel(channel); // Cleanup on unmount\r\n  };\r\n};\r\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,mBAAmB,CAAC,CAAC;;AAE9C,OAAO,MAAMC,mBAAmB,GAAIC,WAAW,IAAK;EAClD;EACA,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,MAAM;MAAEC,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAML,QAAQ,CACnCM,IAAI,CAAC,oBAAoB,CAAC,CAC1BC,MAAM,CAAC,qEAAqE,CAAC,CAAC,CAAC;;IAElF,IAAIF,KAAK,EAAE;MACTG,OAAO,CAACH,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAClD,CAAC,MAAM;MACLH,WAAW,CAACE,IAAI,CAAC;IACnB;EACF,CAAC;EAEDD,aAAa,CAAC,CAAC;;EAEf;EACA,MAAMM,OAAO,GAAGT,QAAQ,CACvBS,OAAO,CAAC,oBAAoB,CAAC,CAC7BC,EAAE,CACD,kBAAkB,EAClB;IAAEC,KAAK,EAAE,GAAG;IAAEC,MAAM,EAAE,QAAQ;IAAEC,KAAK,EAAE;EAAqB,CAAC,EAC5DC,OAAO,IAAK;IACXN,OAAO,CAACO,GAAG,CAAC,0BAA0B,EAAED,OAAO,CAAC;IAChDZ,WAAW,CAAEc,IAAI,IAAK;MACpB,IAAIF,OAAO,CAACG,SAAS,KAAK,QAAQ,EAAE;QAClC,OAAO,CAAC,GAAGD,IAAI,EAAEF,OAAO,CAACI,GAAG,CAAC,CAAC,CAAC;MACjC,CAAC,MAAM,IAAIJ,OAAO,CAACG,SAAS,KAAK,QAAQ,EAAE;QACzC,OAAOD,IAAI,CAACG,GAAG,CAAEC,IAAI,IACnBA,IAAI,CAACC,YAAY,KAAKP,OAAO,CAACI,GAAG,CAACG,YAAY,GAAGP,OAAO,CAACI,GAAG,GAAGE,IACjE,CAAC,CAAC,CAAC;MACL,CAAC,MAAM,IAAIN,OAAO,CAACG,SAAS,KAAK,QAAQ,EAAE;QACzC,OAAOD,IAAI,CAACM,MAAM,CAAEF,IAAI,IAAKA,IAAI,CAACC,YAAY,KAAKP,OAAO,CAACS,GAAG,CAACF,YAAY,CAAC;MAC9E;MACA,OAAOL,IAAI;IACb,CAAC,CAAC;EACJ,CACF,CAAC,CACAQ,SAAS,CAAC,CAAC;EAGZ,OAAO,MAAM;IACXxB,QAAQ,CAACyB,aAAa,CAAChB,OAAO,CAAC,CAAC,CAAC;EACnC,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}