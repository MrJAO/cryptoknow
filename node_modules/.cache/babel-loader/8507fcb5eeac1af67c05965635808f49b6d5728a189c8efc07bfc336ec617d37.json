{"ast":null,"code":"import React,{useState,useEffect}from'react';import{supabase}from'../../supabaseClient';import ToDoItem from'./ToDoItem';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const ToDoList=_ref=>{let{currentUser}=_ref;const[tasks,setTasks]=useState([]);const[doneTasks,setDoneTasks]=useState({});const[finishedTasks,setFinishedTasks]=useState({});useEffect(()=>{if(currentUser){fetchTasks();fetchFinishedTasks();}},[currentUser]);const fetchTasks=async()=>{var _currentUser$user_met,_currentUser$user_met2;if(!currentUser)return;const discord_username=((_currentUser$user_met=currentUser.user_metadata)===null||_currentUser$user_met===void 0?void 0:_currentUser$user_met.user_name)||((_currentUser$user_met2=currentUser.user_metadata)===null||_currentUser$user_met2===void 0?void 0:_currentUser$user_met2.full_name)||'';if(!discord_username){console.error(\"No Discord username found for current user.\");return;}console.log(\"Fetching tasks for:\",discord_username);const{data,error}=await supabase.from('to_do_list').select('id, project_name, task_link, chain, airdrop_type, device_needed').eq('discord_username',discord_username);if(error){console.error(\"❌ Error fetching tasks:\",error.message);}else{console.log(\"✅ Fetched tasks:\",data);setTasks(data||[]);}};const fetchFinishedTasks=async()=>{var _currentUser$user_met3,_currentUser$user_met4;if(!currentUser)return;const discord_username=((_currentUser$user_met3=currentUser.user_metadata)===null||_currentUser$user_met3===void 0?void 0:_currentUser$user_met3.user_name)||((_currentUser$user_met4=currentUser.user_metadata)===null||_currentUser$user_met4===void 0?void 0:_currentUser$user_met4.full_name)||'';const{data,error}=await supabase.from('finished_daily_tasks').select('project_name').eq('discord_username',discord_username);if(error){console.error(\"❌ Error fetching finished tasks:\",error.message);}else{const finished={};data.forEach(task=>{finished[task.project_name]=true;});setFinishedTasks(finished);}};const handleMarkDone=(taskId,isDone)=>{setDoneTasks(prev=>({...prev,[taskId]:isDone}));};const handleDeleteTask=deletedTaskId=>{setTasks(prevTasks=>prevTasks.filter(task=>task.id!==deletedTaskId));setDoneTasks(prev=>{const newState={...prev};delete newState[deletedTaskId];return newState;});};const handleSubmitFinishedTasks=async()=>{var _currentUser$user_met5,_currentUser$user_met6;if(!currentUser)return;const discord_username=((_currentUser$user_met5=currentUser.user_metadata)===null||_currentUser$user_met5===void 0?void 0:_currentUser$user_met5.user_name)||((_currentUser$user_met6=currentUser.user_metadata)===null||_currentUser$user_met6===void 0?void 0:_currentUser$user_met6.full_name)||'';console.log(\"Submitting tasks for:\",discord_username);const newFinishedTasks=tasks.filter(task=>doneTasks[task.id]&&!finishedTasks[task.project_name]);if(newFinishedTasks.length===0){alert(\"No new tasks have been marked as finished.\");return;}const inserts=newFinishedTasks.map(task=>({discord_username,project_name:task.project_name}));const{error}=await supabase.from('finished_daily_tasks').insert(inserts);if(!error){alert(\"✅ Finished tasks submitted! They will be refreshed daily.\");setDoneTasks({});fetchFinishedTasks();// Refresh finished tasks\n}else{console.error(\"❌ Error submitting tasks:\",error.message);}};return/*#__PURE__*/_jsxs(\"div\",{className:\"border p-4 rounded-lg shadow-md bg-white\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"text-2xl font-semibold mb-4 text-center text-gray-800\",children:\"Your To-Do List\"}),tasks.length===0?/*#__PURE__*/_jsx(\"p\",{className:\"text-center text-gray-500\",children:\"No tasks added yet.\"}):/*#__PURE__*/_jsx(\"div\",{className:\"overflow-x-auto\",children:/*#__PURE__*/_jsxs(\"table\",{className:\"w-full border-collapse border border-gray-300 shadow-md rounded-lg overflow-hidden\",children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{className:\"bg-gray-700 text-white text-left\",children:[/*#__PURE__*/_jsx(\"th\",{className:\"border p-3\",children:\"Project Name\"}),/*#__PURE__*/_jsx(\"th\",{className:\"border p-3\",children:\"Task Link\"}),/*#__PURE__*/_jsx(\"th\",{className:\"border p-3\",children:\"Chain\"}),/*#__PURE__*/_jsx(\"th\",{className:\"border p-3\",children:\"Airdrop Type\"}),/*#__PURE__*/_jsx(\"th\",{className:\"border p-3\",children:\"Device Needed\"}),/*#__PURE__*/_jsx(\"th\",{className:\"border p-3\",children:\"Actions\"})]})}),/*#__PURE__*/_jsx(\"tbody\",{children:tasks.map((task,index)=>/*#__PURE__*/_jsx(ToDoItem,{task:task,onDelete:handleDeleteTask,onMarkDone:handleMarkDone,doneTasks:doneTasks,finishedTasks:finishedTasks,isEven:index%2===0// Helps with alternating row colors\n},task.id))})]})}),/*#__PURE__*/_jsx(\"button\",{onClick:handleSubmitFinishedTasks,className:\"mt-4 w-full bg-blue-600 text-white py-2 rounded-lg hover:bg-blue-700 transition duration-200 font-semibold\",children:\"\\u2705 Submit Finished Tasks\"})]});};export default ToDoList;","map":{"version":3,"names":["React","useState","useEffect","supabase","ToDoItem","jsx","_jsx","jsxs","_jsxs","ToDoList","_ref","currentUser","tasks","setTasks","doneTasks","setDoneTasks","finishedTasks","setFinishedTasks","fetchTasks","fetchFinishedTasks","_currentUser$user_met","_currentUser$user_met2","discord_username","user_metadata","user_name","full_name","console","error","log","data","from","select","eq","message","_currentUser$user_met3","_currentUser$user_met4","finished","forEach","task","project_name","handleMarkDone","taskId","isDone","prev","handleDeleteTask","deletedTaskId","prevTasks","filter","id","newState","handleSubmitFinishedTasks","_currentUser$user_met5","_currentUser$user_met6","newFinishedTasks","length","alert","inserts","map","insert","className","children","index","onDelete","onMarkDone","isEven","onClick"],"sources":["C:/Users/opril/cryptoknow/src/components/ToDoList/ToDoList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { supabase } from '../../supabaseClient';\r\nimport ToDoItem from './ToDoItem';\r\n\r\nconst ToDoList = ({ currentUser }) => {\r\n  const [tasks, setTasks] = useState([]);\r\n  const [doneTasks, setDoneTasks] = useState({});\r\n  const [finishedTasks, setFinishedTasks] = useState({});\r\n\r\n  useEffect(() => {\r\n    if (currentUser) {\r\n      fetchTasks();\r\n      fetchFinishedTasks();\r\n    }\r\n  }, [currentUser]);\r\n\r\n  const fetchTasks = async () => {\r\n    if (!currentUser) return;\r\n\r\n    const discord_username = currentUser.user_metadata?.user_name || currentUser.user_metadata?.full_name || '';\r\n\r\n    if (!discord_username) {\r\n      console.error(\"No Discord username found for current user.\");\r\n      return;\r\n    }\r\n\r\n    console.log(\"Fetching tasks for:\", discord_username);\r\n\r\n    const { data, error } = await supabase\r\n      .from('to_do_list')\r\n      .select('id, project_name, task_link, chain, airdrop_type, device_needed')\r\n      .eq('discord_username', discord_username);\r\n\r\n    if (error) {\r\n      console.error(\"❌ Error fetching tasks:\", error.message);\r\n    } else {\r\n      console.log(\"✅ Fetched tasks:\", data);\r\n      setTasks(data || []);\r\n    }\r\n  };\r\n\r\n  const fetchFinishedTasks = async () => {\r\n    if (!currentUser) return;\r\n\r\n    const discord_username = currentUser.user_metadata?.user_name || currentUser.user_metadata?.full_name || '';\r\n    \r\n    const { data, error } = await supabase\r\n      .from('finished_daily_tasks')\r\n      .select('project_name')\r\n      .eq('discord_username', discord_username);\r\n\r\n    if (error) {\r\n      console.error(\"❌ Error fetching finished tasks:\", error.message);\r\n    } else {\r\n      const finished = {};\r\n      data.forEach(task => { finished[task.project_name] = true; });\r\n      setFinishedTasks(finished);\r\n    }\r\n  };\r\n\r\n  const handleMarkDone = (taskId, isDone) => {\r\n    setDoneTasks((prev) => ({ ...prev, [taskId]: isDone }));\r\n  };\r\n\r\n  const handleDeleteTask = (deletedTaskId) => {\r\n    setTasks((prevTasks) => prevTasks.filter(task => task.id !== deletedTaskId));\r\n    setDoneTasks((prev) => {\r\n      const newState = { ...prev };\r\n      delete newState[deletedTaskId];\r\n      return newState;\r\n    });\r\n  };\r\n\r\n  const handleSubmitFinishedTasks = async () => {\r\n    if (!currentUser) return;\r\n\r\n    const discord_username = currentUser.user_metadata?.user_name || currentUser.user_metadata?.full_name || '';\r\n    console.log(\"Submitting tasks for:\", discord_username);\r\n\r\n    const newFinishedTasks = tasks.filter(task => doneTasks[task.id] && !finishedTasks[task.project_name]);\r\n\r\n    if (newFinishedTasks.length === 0) {\r\n      alert(\"No new tasks have been marked as finished.\");\r\n      return;\r\n    }\r\n\r\n    const inserts = newFinishedTasks.map(task => ({ discord_username, project_name: task.project_name }));\r\n\r\n    const { error } = await supabase.from('finished_daily_tasks').insert(inserts);\r\n    if (!error) {\r\n      alert(\"✅ Finished tasks submitted! They will be refreshed daily.\");\r\n      setDoneTasks({});\r\n      fetchFinishedTasks(); // Refresh finished tasks\r\n    } else {\r\n      console.error(\"❌ Error submitting tasks:\", error.message);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"border p-4 rounded-lg shadow-md bg-white\">\r\n      <h2 className=\"text-2xl font-semibold mb-4 text-center text-gray-800\">Your To-Do List</h2>\r\n      {tasks.length === 0 ? (\r\n        <p className=\"text-center text-gray-500\">No tasks added yet.</p>\r\n      ) : (\r\n        <div className=\"overflow-x-auto\">\r\n          <table className=\"w-full border-collapse border border-gray-300 shadow-md rounded-lg overflow-hidden\">\r\n            <thead>\r\n              <tr className=\"bg-gray-700 text-white text-left\">\r\n                <th className=\"border p-3\">Project Name</th>\r\n                <th className=\"border p-3\">Task Link</th>\r\n                <th className=\"border p-3\">Chain</th>\r\n                <th className=\"border p-3\">Airdrop Type</th>\r\n                <th className=\"border p-3\">Device Needed</th>\r\n                <th className=\"border p-3\">Actions</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {tasks.map((task, index) => (\r\n                <ToDoItem \r\n                  key={task.id} \r\n                  task={task} \r\n                  onDelete={handleDeleteTask} \r\n                  onMarkDone={handleMarkDone} \r\n                  doneTasks={doneTasks} \r\n                  finishedTasks={finishedTasks} \r\n                  isEven={index % 2 === 0} // Helps with alternating row colors\r\n                />\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      )}\r\n      <button \r\n        onClick={handleSubmitFinishedTasks} \r\n        className=\"mt-4 w-full bg-blue-600 text-white py-2 rounded-lg hover:bg-blue-700 transition duration-200 font-semibold\"\r\n      >\r\n        ✅ Submit Finished Tasks\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ToDoList;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}