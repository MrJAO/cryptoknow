{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\opril\\\\cryptoknow\\\\src\\\\components\\\\ToDoList\\\\ToDoList.js\",\n  _s = $RefreshSig$();\n// ToDoList.js\nimport React, { useState, useEffect } from 'react';\nimport { supabase } from '../../supabaseClient';\nimport ToDoItem from './ToDoItem';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ToDoList = ({\n  currentUser\n}) => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [doneTasks, setDoneTasks] = useState({});\n  useEffect(() => {\n    if (currentUser) {\n      fetchTasks();\n    }\n  }, [currentUser]);\n  const fetchTasks = async () => {\n    var _currentUser$user_met;\n    if (!currentUser) return;\n    const discord_username = ((_currentUser$user_met = currentUser.user_metadata) === null || _currentUser$user_met === void 0 ? void 0 : _currentUser$user_met.full_name) || '';\n    const {\n      data,\n      error\n    } = await supabase.from('to_do_list').select('*').eq('discord_username', discord_username);\n    if (!error) setTasks(data);\n  };\n  const handleMarkDone = (taskId, isDone) => {\n    setDoneTasks(prev => ({\n      ...prev,\n      [taskId]: isDone\n    }));\n  };\n  const handleDeleteTask = deletedTaskId => {\n    setTasks(prevTasks => prevTasks.filter(task => task.id !== deletedTaskId));\n    setDoneTasks(prev => {\n      const newState = {\n        ...prev\n      };\n      delete newState[deletedTaskId];\n      return newState;\n    });\n  };\n  const handleSubmitFinishedTasks = async () => {\n    var _currentUser$user_met2;\n    if (!currentUser) return;\n    const discord_username = ((_currentUser$user_met2 = currentUser.user_metadata) === null || _currentUser$user_met2 === void 0 ? void 0 : _currentUser$user_met2.full_name) || '';\n    const finishedTasks = tasks.filter(task => doneTasks[task.id]);\n    if (finishedTasks.length === 0) {\n      alert(\"No tasks have been marked as finished.\");\n      return;\n    }\n    const inserts = finishedTasks.map(task => ({\n      discord_username,\n      project_name: task.project_name\n    }));\n    const {\n      error\n    } = await supabase.from('finished_daily_tasks').insert(inserts);\n    if (!error) {\n      alert(\"Finished tasks submitted! They will be refreshed daily.\");\n      setDoneTasks({});\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"border p-4 rounded-lg shadow-md\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-xl font-semibold mb-4\",\n      children: \"Your To-Do List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), tasks.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No tasks added yet.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this) : tasks.map(task => /*#__PURE__*/_jsxDEV(ToDoItem, {\n      task: task,\n      onDelete: handleDeleteTask,\n      onMarkDone: handleMarkDone\n    }, task.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmitFinishedTasks,\n      className: \"mt-4 w-full bg-blue-500 text-white py-2 rounded-lg hover:bg-blue-600\",\n      children: \"Submit Finished Tasks\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_s(ToDoList, \"YZc1p8/ILyfES+30393wbK2TsYM=\");\n_c = ToDoList;\nexport default ToDoList;\nvar _c;\n$RefreshReg$(_c, \"ToDoList\");","map":{"version":3,"names":["React","useState","useEffect","supabase","ToDoItem","jsxDEV","_jsxDEV","ToDoList","currentUser","_s","tasks","setTasks","doneTasks","setDoneTasks","fetchTasks","_currentUser$user_met","discord_username","user_metadata","full_name","data","error","from","select","eq","handleMarkDone","taskId","isDone","prev","handleDeleteTask","deletedTaskId","prevTasks","filter","task","id","newState","handleSubmitFinishedTasks","_currentUser$user_met2","finishedTasks","length","alert","inserts","map","project_name","insert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onDelete","onMarkDone","onClick","_c","$RefreshReg$"],"sources":["C:/Users/opril/cryptoknow/src/components/ToDoList/ToDoList.js"],"sourcesContent":["// ToDoList.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport { supabase } from '../../supabaseClient';\r\nimport ToDoItem from './ToDoItem';\r\n\r\nconst ToDoList = ({ currentUser }) => {\r\n  const [tasks, setTasks] = useState([]);\r\n  const [doneTasks, setDoneTasks] = useState({});\r\n\r\n  useEffect(() => {\r\n    if (currentUser) {\r\n      fetchTasks();\r\n    }\r\n  }, [currentUser]);\r\n\r\n  const fetchTasks = async () => {\r\n    if (!currentUser) return;\r\n    const discord_username = currentUser.user_metadata?.full_name || '';\r\n    const { data, error } = await supabase.from('to_do_list').select('*').eq('discord_username', discord_username);\r\n    if (!error) setTasks(data);\r\n  };\r\n\r\n  const handleMarkDone = (taskId, isDone) => {\r\n    setDoneTasks((prev) => ({ ...prev, [taskId]: isDone }));\r\n  };\r\n\r\n  const handleDeleteTask = (deletedTaskId) => {\r\n    setTasks((prevTasks) => prevTasks.filter(task => task.id !== deletedTaskId));\r\n    setDoneTasks((prev) => {\r\n      const newState = { ...prev };\r\n      delete newState[deletedTaskId];\r\n      return newState;\r\n    });\r\n  };\r\n\r\n  const handleSubmitFinishedTasks = async () => {\r\n    if (!currentUser) return;\r\n    const discord_username = currentUser.user_metadata?.full_name || '';\r\n    const finishedTasks = tasks.filter(task => doneTasks[task.id]);\r\n\r\n    if (finishedTasks.length === 0) {\r\n      alert(\"No tasks have been marked as finished.\");\r\n      return;\r\n    }\r\n\r\n    const inserts = finishedTasks.map(task => ({ discord_username, project_name: task.project_name }));\r\n\r\n    const { error } = await supabase.from('finished_daily_tasks').insert(inserts);\r\n    if (!error) {\r\n      alert(\"Finished tasks submitted! They will be refreshed daily.\");\r\n      setDoneTasks({});\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"border p-4 rounded-lg shadow-md\">\r\n      <h2 className=\"text-xl font-semibold mb-4\">Your To-Do List</h2>\r\n      {tasks.length === 0 ? (\r\n        <p>No tasks added yet.</p>\r\n      ) : (\r\n        tasks.map(task => (\r\n          <ToDoItem key={task.id} task={task} onDelete={handleDeleteTask} onMarkDone={handleMarkDone} />\r\n        ))\r\n      )}\r\n      <button \r\n        onClick={handleSubmitFinishedTasks} \r\n        className=\"mt-4 w-full bg-blue-500 text-white py-2 rounded-lg hover:bg-blue-600\"\r\n      >\r\n        Submit Finished Tasks\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ToDoList;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,QAAQ,QAAQ,sBAAsB;AAC/C,OAAOC,QAAQ,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,QAAQ,GAAGA,CAAC;EAAEC;AAAY,CAAC,KAAK;EAAAC,EAAA;EACpC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACW,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,CAAC,CAAC,CAAC;EAE9CC,SAAS,CAAC,MAAM;IACd,IAAIM,WAAW,EAAE;MACfM,UAAU,CAAC,CAAC;IACd;EACF,CAAC,EAAE,CAACN,WAAW,CAAC,CAAC;EAEjB,MAAMM,UAAU,GAAG,MAAAA,CAAA,KAAY;IAAA,IAAAC,qBAAA;IAC7B,IAAI,CAACP,WAAW,EAAE;IAClB,MAAMQ,gBAAgB,GAAG,EAAAD,qBAAA,GAAAP,WAAW,CAACS,aAAa,cAAAF,qBAAA,uBAAzBA,qBAAA,CAA2BG,SAAS,KAAI,EAAE;IACnE,MAAM;MAAEC,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAMjB,QAAQ,CAACkB,IAAI,CAAC,YAAY,CAAC,CAACC,MAAM,CAAC,GAAG,CAAC,CAACC,EAAE,CAAC,kBAAkB,EAAEP,gBAAgB,CAAC;IAC9G,IAAI,CAACI,KAAK,EAAET,QAAQ,CAACQ,IAAI,CAAC;EAC5B,CAAC;EAED,MAAMK,cAAc,GAAGA,CAACC,MAAM,EAAEC,MAAM,KAAK;IACzCb,YAAY,CAAEc,IAAI,KAAM;MAAE,GAAGA,IAAI;MAAE,CAACF,MAAM,GAAGC;IAAO,CAAC,CAAC,CAAC;EACzD,CAAC;EAED,MAAME,gBAAgB,GAAIC,aAAa,IAAK;IAC1ClB,QAAQ,CAAEmB,SAAS,IAAKA,SAAS,CAACC,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKJ,aAAa,CAAC,CAAC;IAC5EhB,YAAY,CAAEc,IAAI,IAAK;MACrB,MAAMO,QAAQ,GAAG;QAAE,GAAGP;MAAK,CAAC;MAC5B,OAAOO,QAAQ,CAACL,aAAa,CAAC;MAC9B,OAAOK,QAAQ;IACjB,CAAC,CAAC;EACJ,CAAC;EAED,MAAMC,yBAAyB,GAAG,MAAAA,CAAA,KAAY;IAAA,IAAAC,sBAAA;IAC5C,IAAI,CAAC5B,WAAW,EAAE;IAClB,MAAMQ,gBAAgB,GAAG,EAAAoB,sBAAA,GAAA5B,WAAW,CAACS,aAAa,cAAAmB,sBAAA,uBAAzBA,sBAAA,CAA2BlB,SAAS,KAAI,EAAE;IACnE,MAAMmB,aAAa,GAAG3B,KAAK,CAACqB,MAAM,CAACC,IAAI,IAAIpB,SAAS,CAACoB,IAAI,CAACC,EAAE,CAAC,CAAC;IAE9D,IAAII,aAAa,CAACC,MAAM,KAAK,CAAC,EAAE;MAC9BC,KAAK,CAAC,wCAAwC,CAAC;MAC/C;IACF;IAEA,MAAMC,OAAO,GAAGH,aAAa,CAACI,GAAG,CAACT,IAAI,KAAK;MAAEhB,gBAAgB;MAAE0B,YAAY,EAAEV,IAAI,CAACU;IAAa,CAAC,CAAC,CAAC;IAElG,MAAM;MAAEtB;IAAM,CAAC,GAAG,MAAMjB,QAAQ,CAACkB,IAAI,CAAC,sBAAsB,CAAC,CAACsB,MAAM,CAACH,OAAO,CAAC;IAC7E,IAAI,CAACpB,KAAK,EAAE;MACVmB,KAAK,CAAC,yDAAyD,CAAC;MAChE1B,YAAY,CAAC,CAAC,CAAC,CAAC;IAClB;EACF,CAAC;EAED,oBACEP,OAAA;IAAKsC,SAAS,EAAC,iCAAiC;IAAAC,QAAA,gBAC9CvC,OAAA;MAAIsC,SAAS,EAAC,4BAA4B;MAAAC,QAAA,EAAC;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAC9DvC,KAAK,CAAC4B,MAAM,KAAK,CAAC,gBACjBhC,OAAA;MAAAuC,QAAA,EAAG;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,GAE1BvC,KAAK,CAAC+B,GAAG,CAACT,IAAI,iBACZ1B,OAAA,CAACF,QAAQ;MAAe4B,IAAI,EAAEA,IAAK;MAACkB,QAAQ,EAAEtB,gBAAiB;MAACuB,UAAU,EAAE3B;IAAe,GAA5EQ,IAAI,CAACC,EAAE;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAuE,CAC9F,CACF,eACD3C,OAAA;MACE8C,OAAO,EAAEjB,yBAA0B;MACnCS,SAAS,EAAC,sEAAsE;MAAAC,QAAA,EACjF;IAED;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV,CAAC;AAACxC,EAAA,CAnEIF,QAAQ;AAAA8C,EAAA,GAAR9C,QAAQ;AAqEd,eAAeA,QAAQ;AAAC,IAAA8C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}